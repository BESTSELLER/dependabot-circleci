version: 2.1

orbs:
  secret-injector: bestsellerit/secret-injector@2.8.0
  cci-common: bestsellerit/cci-common@dev:ES-3310
commands:
  gcloud-token-auth:
    steps:
      - run:
          name: gcloud access token
          command: |
            echo 'export GOOGLE_OAUTH_ACCESS_TOKEN=$(cat /tmp/cloudrun_token | jq -r .token | sed "s/\.*$//" | tr -d "\n")' >> $BASH_ENV
            echo 'export CLOUDSDK_AUTH_ACCESS_TOKEN=$GOOGLE_OAUTH_ACCESS_TOKEN' >> $BASH_ENV

jobs:
  init-db:
    description: |
      Connects to database using cloud sql proxy and creates tabel using psql
    executor: cci-common/cloudsdk_image
    parameters:
      instance:
        description: The Cloud SQL instance to connect to
        type: string
      project:
        description: Project name
        type: string
      username:
        description: User name
        type: string
      password:
        description: Password for user
        type: string
      db_name:
        description: Name of DB
        type: string
      init-file:
        description: File to use for initialising table
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: install jq and gettext
          command: |
            apk add --no-cache jq gettext
      - gcloud-token-auth
      - run:
          name: Install Cloud SQL Proxy
          command: |
            source /tmp/secrets
            wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O /usr/bin/./cloud_sql_proxy
            chmod +x /usr/bin/./cloud_sql_proxy
      - run:
          name: Install psql
          command: |
            apk update
            apk --update add postgresql-client
      - run:
          name: Start Cloud SQL Proxy
          command: |
            source /tmp/secrets
            HOST=$(gcloud sql instances describe "<< parameters.instance >>" --format="value(connectionName)" --project="<< parameters.project >>")
            cloud_sql_proxy -instances="$HOST"=tcp:5432
          background: true
      - run:
          name: Replace vars
          command: |
            source /tmp/secrets
            envsubst < "<< parameters.init-file >>" > init-temp && mv init-temp "<< parameters.init-file >>"
      - run:
          name: Initalize DB with table
          command: |
            source /tmp/secrets
            sleep 10s
            export PGPASSWORD="<< parameters.password >>"
            psql -f "<< parameters.init-file >>" -U "<< parameters.username >>" -d "<< parameters.db_name >>" -h 127.0.0.1

deploy_filter: &deploy_filter
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^[0-9]+(\.[0-9]+)*(-.*)*$/

no_deploy_filter: &no_deploy_filter
  filters:
    tags:
      ignore: /^[0-9]+(\.[0-9]+)*(-.*)*$/

prod_context: &prod_context
  context:
    - es02-prod
    - shared

workflows:
  test:
    jobs:
      - secret-injector/dump-secrets-yaml:
          secret-file: secrets-ci.yaml
          vault-oidc: true
          <<: [*prod_context, *no_deploy_filter]
      - cci-common/go_test_unit:
          go_version: "1.22.1"
          <<: [*prod_context, *no_deploy_filter]
      - cci-common/go_test_sonar:
          go_version: "1.22.1"
          requires:
            - secret-injector/dump-secrets-yaml
          <<: [*prod_context, *no_deploy_filter]
      - cci-common/build_n_push_docker:
          dry_run: true
          requires:
            - secret-injector/dump-secrets-yaml
          <<: [*prod_context, *no_deploy_filter]
      - cci-common/terraform_plan:
          pre-steps:
            - gcloud-token-auth
          path: ./terraform
          args: '-var tag="$CIRCLE_SHA1" -var env="prod" -var team="engineering-services" -var service="$CIRCLE_PROJECT_REPONAME"'
          lock: false
          requires:
            - secret-injector/dump-secrets-yaml
          <<: [*prod_context, *no_deploy_filter]

  deploy:
    jobs:
      - secret-injector/dump-secrets-yaml:
          secret-file: secrets-ci.yaml
          vault-oidc: true
          <<: [*prod_context, *deploy_filter]
      - cci-common/build_n_push_docker:
          tag: ${CIRCLE_TAG}
          repo: public-docker
          requires:
            - secret-injector/dump-secrets-yaml
          <<: [*prod_context, *deploy_filter]
      - cci-common/terraform_plan:
          pre-steps:
            - gcloud-token-auth
          path: ./terraform
          args: '-var tag="$CIRCLE_TAG" -var env="prod" -var team="engineering-services" -var service="$CIRCLE_PROJECT_REPONAME"'
          requires:
            - cci-common/build_n_push_docker
          <<: [*prod_context, *deploy_filter]
      - cci-common/terraform_apply:
          pre-steps:
            - gcloud-token-auth
          path: ./terraform
          requires:
            - cci-common/terraform_plan
          <<: [*prod_context, *deploy_filter]
      - init-db:
          instance: $instance
          db_name: $db_name
          project: dependabot-pub-prod-586e
          username: $username
          password: $password
          init-file: ./init.sql
          requires:
            - cci-common/terraform_apply
          <<: [*prod_context, *deploy_filter]
