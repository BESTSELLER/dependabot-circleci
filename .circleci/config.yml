version: 2.1
executors:
  gcp_image:
    docker:
      - image: google/cloud-sdk:alpine
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASS
  go_image:
    docker:
      - image: cimg/go:1.16
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASS

orbs:
  secret-injector: bestsellerit/secret-injector@1.7.5

jobs:
  test:
    executor: go_image
    steps:
      - checkout
      - run:
          name: go get
          command: |
            go get ./...
      - run:
          name: install gotestsum
          command: go install gotest.tools/gotestsum@latest
      - run:
          name: go test
          command: |
            mkdir junit
            gotestsum --junitfile junit/unit-tests.xml
      - store_test_results:
          path: ~/project/junit
      - run:
          name: go build
          command: |
            GOOS=linux \
            GOARCH=amd64 \
            go build -ldflags="-w -s"
  test-sonar:
    executor: go_image
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - run:
          name: Install Sonarqube scanner
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip -P /tmp/
            cd /tmp/
            unzip sonar-scanner-cli-4.4.0.2170-linux.zip
      - run:
          name: go get
          command: |
            go get ./...
      - run:
          name: go test - sonar
          command: |
            go test ./... -coverprofile=coverage.out
      - run:
          name: Run SonarCloud Scanner
          command: |
            source /tmp/secrets
            export SONAR_SCANNER_OPTS="-Xmx2048m"
            eval /tmp/sonar-scanner-4.4.0.2170-linux/bin/sonar-scanner \
              -Dsonar.projectKey=$K8S_CLUSTER_SONAR_KEY_GH"_"$CIRCLE_PROJECT_REPONAME \
              -Dsonar.projectName=$CIRCLE_PROJECT_REPONAME \
              -Dsonar.organization=$K8S_CLUSTER_SONAR_ORG_GH \
              -Dsonar.sources=. \
              -Dsonar.test.inclusions=**/**_test.go \
              -Dsonar.sources.inclusions=**/**.go \
              -Dsonar.host.url=$K8S_CLUSTER_SONAR_HOST \
              -Dsonar.login=$K8S_CLUSTER_SONAR_LOGIN_GH \
              -Dsonar.links.scm=$CIRCLE_REPOSITORY_URL \
              -Dsonar.go.coverage.reportPaths=coverage.out

  build:
    executor: gcp_image
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build image
          command: |
            docker build -t $CIRCLE_PROJECT_REPONAME:latest .
  build-push-serverless:
    executor: gcp_image
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp
      - run:
          name: Build and push image
          command: |
            # source /tmp/secrets

            gcloud auth activate-service-account --key-file=/tmp/cluster_secret.json
            gcloud auth configure-docker europe-docker.pkg.dev --quiet

            export docker_registry_url=europe-docker.pkg.dev/es-standalone-cb21
            docker build -t $docker_registry_url/es-docker/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG .
            docker build -t $docker_registry_url/es-docker/$CIRCLE_PROJECT_REPONAME:latest .

            docker push $docker_registry_url/es-docker/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            docker push $docker_registry_url/es-docker/$CIRCLE_PROJECT_REPONAME:latest

  deploy-serverless:
    executor: gcp_image
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: install jq
          command: |
            apk add --no-cache jq
      - run:
          name: gcloud login
          command: |
            gcloud components install beta --quiet
            cat /tmp/cloudrun_admin | jq -r .private_key_data | base64 -d > cloudrun-admin.json
            gcloud auth activate-service-account --key-file=./cloudrun-admin.json
      - run:
          name: creating deployment
          command: |
            gcloud beta run deploy $CIRCLE_PROJECT_REPONAME \
              --image=europe-docker.pkg.dev/es-standalone-cb21/es-docker/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG \
              --allow-unauthenticated \
              --min-instances=0 \
              --max-instances=100 \
              --port=3000 \
              --platform=managed \
              --region=europe-west4 \
              --project=es-standalone-cb21 \
              --timeout=60m \
              --labels service=dependabot-circleci \
              --set-env-vars VAULT_ADDR="${VAULT_ADDR}",VAULT_ROLE=dependabot-circleci,VAULT_SECRET=ES/data/dependabot-circleci/prod,DEPENDABOT_VERSION=${CIRCLE_TAG},DEPENDABOT_CONFIG=/secrets/secrets \
              --service-account=dependabot-circleci@es-standalone-cb21.iam.gserviceaccount.com
      - run:
          name: create domain mapping
          command: |
            if ! gcloud beta run domain-mappings describe --domain=$CIRCLE_PROJECT_REPONAME.bestsellerit.com --platform=managed --region=europe-west4 --project=es-standalone-cb21; then
              gcloud beta run domain-mappings create \
                --service=$CIRCLE_PROJECT_REPONAME \
                --domain=$CIRCLE_PROJECT_REPONAME.bestsellerit.com \
                --platform=managed \
                --region=europe-west4 \
                --project=es-standalone-cb21
            fi
      - run:
          name: create scheduled job
          command: |
            bearer=$(cat /tmp/secrets.json | jq -r .http.token )
            gcloud beta scheduler jobs update http $CIRCLE_PROJECT_REPONAME --schedule "00 23 * * *" \
              --http-method=POST \
              --uri=https://$CIRCLE_PROJECT_REPONAME.bestsellerit.com/start \
              --update-headers "Authorization"="Bearer $bearer" \
              --time-zone="Europe/Copenhagen" \
              --project=es-standalone-cb21

workflows:
  test:
    jobs:
      - secret-injector/dump-secrets:
          context:
            - es02-prod
            - shared
          filters:
            tags:
              ignore: /^[0-9]+(\.[0-9]+)*(-.*)*$/
      - test:
          context:
            - shared
          filters:
            tags:
              ignore: /^[0-9]+(\.[0-9]+)*(-.*)*$/
      - test-sonar:
          context:
            - es02-prod
            - shared
          requires:
            - secret-injector/dump-secrets
          filters:
            tags:
              ignore: /^[0-9]+(\.[0-9]+)*(-.*)*$/
      - build:
          filters:
            tags:
              ignore: /^[0-9]+(\.[0-9]+)*(-.*)*$/

  serverless-test-build-deploy:
    jobs:
      - secret-injector/dump-secrets:
          context: es02-prod
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(-.*)*$/
            branches:
              ignore: /.*/
      - secret-injector/dump-secrets:
          requires:
            - secret-injector/dump-secrets
          name: secret-injector/cloudrun
          vault-path: "gcp_landingzone/key/cloudrun-admin"
          output-filename: cloudrun_admin
          format: json
          context:
            - es02-prod
            - shared
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(-.*)*$/
            branches:
              ignore: /.*/
      - build-push-serverless:
          requires:
            - secret-injector/cloudrun
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(-.*)*$/
            branches:
              ignore: /.*/
      - secret-injector/dump-secrets:
          name: secret-injector/project
          vault-path: ES/data/dependabot-circleci/prod
          format: json
          output-filename: secrets.json
          context:
            - es02-prod
            - shared
          requires:
            - build-push-serverless
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(-.*)*$/
            branches:
              ignore: /.*/
      - deploy-serverless:
          requires:
            - secret-injector/project
          context:
            - es02-prod
            - shared
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(-.*)*$/
            branches:
              ignore: /.*/
